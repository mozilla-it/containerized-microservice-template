[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "containerized_microservice_template"
version = "0.0.1"
description = "Template microservice repo."
authors = [
    "Bryan Sieber <bsieber@mozilla.com>",
]
readme = "README.md"
homepage = "https://github.com/mozilla-it/containerized-microservice-template"
repository = "https://github.com/mozilla-it/containerized-microservice-template"
documentation = "https://mozilla-it.github.io/containerized-microservice-template"


[tool.poetry.dependencies]
# These packages are mandatory and form the core of this packageâ€™s distribution.
python = ">=3.7, <4"
pre-commit = "^2.7.1"
fastapi = "^0.61.1"
requests = "^2.24.0"
uvicorn = "^0.12.2"
gunicorn = "^20.0.4"


[tool.poetry.dev-dependencies]
behave = "^1.2.6"
pytest = "^6.1.2"
isort = {extras = ["pyproject"], version = "^4.3.21"}
black = "^20.8b1"
coverage = {extras = ["toml"], version = "^5.3"}

[tool.pytest.ini_options]
python_files = "*.py"
python_functions = "test_*"
testpaths = [
    "tests",
]

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.isort]
# https://github.com/timothycrosley/isort
# https://github.com/timothycrosley/isort/wiki/isort-Settings
line_length = 88
indent = '    '
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0


[tool.coverage]
# https://github.com/nedbat/coveragepy
    [tool.coverage.run]
    omit = ['*/.local/*', '/usr/*','*/.venv/*','*/.tox/*']
    # omit anything in a .local directory anywhere
    # omit everything in /usr

    [tool.coverage.report]

    exclude_lines = [
        "# noqa",
        "raise NotImplementedError",
        "pragma: no cover",
        "def __repr__",
        "if .debug:",
        "raise NotImplementedError",
        "if __name__ == .__main__.:",
        "logger.",
        "from",
        "import"
    ]
